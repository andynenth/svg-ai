# Kubernetes Production Deployment for 4-Tier SVG-AI System
# Complete production-ready deployment with scaling and monitoring

apiVersion: v1
kind: Namespace
metadata:
  name: svg-ai-4tier-prod
  labels:
    name: svg-ai-4tier-prod
    environment: production
    system: 4tier

---
# ============================================================================
# ConfigMaps
# ============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: svg-ai-4tier-config
  namespace: svg-ai-4tier-prod
data:
  ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  API_HOST: "0.0.0.0"
  API_PORT: "8000"
  API_WORKERS: "4"
  WORKER_CONCURRENCY: "2"
  WORKER_PREFETCH: "4"
  MAX_REQUEST_SIZE: "104857600"
  REQUEST_TIMEOUT: "300"
  TIER_SYSTEM_VERSION: "4tier-v1.0"

---
# ============================================================================
# Secrets
# ============================================================================
apiVersion: v1
kind: Secret
metadata:
  name: svg-ai-4tier-secrets
  namespace: svg-ai-4tier-prod
type: Opaque
data:
  # Base64 encoded secrets (replace with actual values)
  DB_PASSWORD: cGFzc3dvcmQxMjM=  # password123
  REDIS_PASSWORD: cmVkaXNwYXNzd29yZA==  # redispassword
  PRODUCTION_API_KEY: dGllcjQtcHJvZC1rZXktYWJjZGVmZ2g=  # tier4-prod-key-abcdefgh
  ADMIN_API_KEY: dGllcjQtYWRtaW4ta2V5LWFiY2RlZmdo=  # tier4-admin-key-abcdefgh
  MONITORING_API_KEY: dGllcjQtbW9uaXRvci1rZXktYWJjZGVmZ2g=  # tier4-monitor-key-abcdefgh
  FLOWER_PASSWORD: Zmxvd2VyYWRtaW4=  # floweradmin
  GRAFANA_ADMIN_PASSWORD: Z3JhZmFuYWFkbWlu=  # grafanaadmin

---
# ============================================================================
# PostgreSQL StatefulSet
# ============================================================================
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-4tier
  namespace: svg-ai-4tier-prod
  labels:
    app: svg-ai
    component: database
    tier: data
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: svg-ai
      component: database
  template:
    metadata:
      labels:
        app: svg-ai
        component: database
        tier: data
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: svgai_prod
        - name: POSTGRES_USER
          value: svgai
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: svg-ai-4tier-secrets
              key: DB_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
          name: postgres
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - svgai
            - -d
            - svgai_prod
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - svgai
            - -d
            - svgai_prod
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 50Gi
      storageClassName: fast-ssd

---
# ============================================================================
# Redis Deployment
# ============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-4tier
  namespace: svg-ai-4tier-prod
  labels:
    app: svg-ai
    component: cache
    tier: data
spec:
  replicas: 1
  selector:
    matchLabels:
      app: svg-ai
      component: cache
  template:
    metadata:
      labels:
        app: svg-ai
        component: cache
        tier: data
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command: ["redis-server"]
        args:
        - "--requirepass"
        - "$(REDIS_PASSWORD)"
        - "--appendonly"
        - "yes"
        - "--maxmemory"
        - "512mb"
        - "--maxmemory-policy"
        - "allkeys-lru"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: svg-ai-4tier-secrets
              key: REDIS_PASSWORD
        ports:
        - containerPort: 6379
          name: redis
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: redis-storage
          mountPath: /data
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-storage-pvc

---
# ============================================================================
# 4-Tier API Deployment
# ============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: svg-ai-4tier-api
  namespace: svg-ai-4tier-prod
  labels:
    app: svg-ai
    component: 4tier-api
    tier: application
spec:
  replicas: 3
  selector:
    matchLabels:
      app: svg-ai
      component: 4tier-api
  template:
    metadata:
      labels:
        app: svg-ai
        component: 4tier-api
        tier: application
    spec:
      containers:
      - name: 4tier-api
        image: svg-ai/4tier-api:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: DATABASE_URL
          value: "postgresql://svgai:$(DB_PASSWORD)@postgres-service:5432/svgai_prod"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis-service:6379/0"
        envFrom:
        - configMapRef:
            name: svg-ai-4tier-config
        - secretRef:
            name: svg-ai-4tier-secrets
        resources:
          requests:
            memory: "1Gi"
            cpu: "1000m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /api/v2/optimization/health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/v2/optimization/health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
        volumeMounts:
        - name: api-cache
          mountPath: /app/cache
        - name: api-logs
          mountPath: /app/logs
        - name: api-models
          mountPath: /app/models
      volumes:
      - name: api-cache
        persistentVolumeClaim:
          claimName: api-cache-pvc
      - name: api-logs
        persistentVolumeClaim:
          claimName: api-logs-pvc
      - name: api-models
        persistentVolumeClaim:
          claimName: api-models-pvc

---
# ============================================================================
# 4-Tier Worker Deployment
# ============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: svg-ai-4tier-worker
  namespace: svg-ai-4tier-prod
  labels:
    app: svg-ai
    component: 4tier-worker
    tier: worker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: svg-ai
      component: 4tier-worker
  template:
    metadata:
      labels:
        app: svg-ai
        component: 4tier-worker
        tier: worker
    spec:
      containers:
      - name: 4tier-worker
        image: svg-ai/4tier-worker:latest
        imagePullPolicy: Always
        env:
        - name: DATABASE_URL
          value: "postgresql://svgai:$(DB_PASSWORD)@postgres-service:5432/svgai_prod"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis-service:6379/0"
        - name: WORKER_TYPE
          value: "4tier-optimization"
        envFrom:
        - configMapRef:
            name: svg-ai-4tier-config
        - secretRef:
            name: svg-ai-4tier-secrets
        resources:
          requests:
            memory: "2Gi"
            cpu: "2000m"
          limits:
            memory: "4Gi"
            cpu: "4000m"
        livenessProbe:
          exec:
            command:
            - python
            - -c
            - "import backend.ai_modules.optimization as opt; print('Worker healthy')"
          initialDelaySeconds: 120
          periodSeconds: 60
          timeoutSeconds: 15
        volumeMounts:
        - name: worker-cache
          mountPath: /app/cache
        - name: worker-logs
          mountPath: /app/logs
        - name: worker-models
          mountPath: /app/models
      volumes:
      - name: worker-cache
        persistentVolumeClaim:
          claimName: worker-cache-pvc
      - name: worker-logs
        persistentVolumeClaim:
          claimName: worker-logs-pvc
      - name: worker-models
        persistentVolumeClaim:
          claimName: worker-models-pvc

---
# ============================================================================
# Services
# ============================================================================
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: svg-ai-4tier-prod
  labels:
    app: svg-ai
    component: database
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app: svg-ai
    component: database

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: svg-ai-4tier-prod
  labels:
    app: svg-ai
    component: cache
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  selector:
    app: svg-ai
    component: cache

---
apiVersion: v1
kind: Service
metadata:
  name: svg-ai-4tier-api-service
  namespace: svg-ai-4tier-prod
  labels:
    app: svg-ai
    component: 4tier-api
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8000
    name: http
  selector:
    app: svg-ai
    component: 4tier-api

---
# ============================================================================
# Horizontal Pod Autoscaler
# ============================================================================
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: svg-ai-4tier-api-hpa
  namespace: svg-ai-4tier-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: svg-ai-4tier-api
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: svg-ai-4tier-worker-hpa
  namespace: svg-ai-4tier-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: svg-ai-4tier-worker
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 80
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85

---
# ============================================================================
# Persistent Volume Claims
# ============================================================================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-storage-pvc
  namespace: svg-ai-4tier-prod
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: api-cache-pvc
  namespace: svg-ai-4tier-prod
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 20Gi
  storageClassName: shared-storage

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: api-logs-pvc
  namespace: svg-ai-4tier-prod
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: shared-storage

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: api-models-pvc
  namespace: svg-ai-4tier-prod
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: shared-storage

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: worker-cache-pvc
  namespace: svg-ai-4tier-prod
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 20Gi
  storageClassName: shared-storage

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: worker-logs-pvc
  namespace: svg-ai-4tier-prod
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: shared-storage

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: worker-models-pvc
  namespace: svg-ai-4tier-prod
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: shared-storage

---
# ============================================================================
# Network Policies
# ============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: svg-ai-4tier-network-policy
  namespace: svg-ai-4tier-prod
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: svg-ai
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: svg-ai
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53