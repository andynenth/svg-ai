apiVersion: apps/v1
kind: Deployment
metadata:
  name: svg-ai-api
  namespace: svg-ai-prod
  labels:
    app: svg-ai
    component: api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: svg-ai
      component: api
  template:
    metadata:
      labels:
        app: svg-ai
        component: api
    spec:
      containers:
      - name: api
        image: svg-ai/api:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: DATABASE_URL
          value: "postgresql://svgai:$(DB_PASSWORD)@postgres-service:5432/svgai_prod"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis-service:6379/0"
        envFrom:
        - configMapRef:
            name: svg-ai-config
        - secretRef:
            name: svg-ai-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: api-cache
          mountPath: /app/cache
        - name: api-logs
          mountPath: /app/logs
      volumes:
      - name: api-cache
        persistentVolumeClaim:
          claimName: api-cache-pvc
      - name: api-logs
        persistentVolumeClaim:
          claimName: api-logs-pvc
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: svg-ai-worker
  namespace: svg-ai-prod
  labels:
    app: svg-ai
    component: worker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: svg-ai
      component: worker
  template:
    metadata:
      labels:
        app: svg-ai
        component: worker
    spec:
      containers:
      - name: worker
        image: svg-ai/worker:latest
        imagePullPolicy: Always
        env:
        - name: DATABASE_URL
          value: "postgresql://svgai:$(DB_PASSWORD)@postgres-service:5432/svgai_prod"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis-service:6379/0"
        - name: WORKER_TYPE
          value: "optimization"
        envFrom:
        - configMapRef:
            name: svg-ai-config
        - secretRef:
            name: svg-ai-secrets
        resources:
          requests:
            memory: "1Gi"
            cpu: "1000m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          exec:
            command:
            - python
            - -c
            - "import backend.ai_modules.optimization as opt; print('Worker healthy')"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        volumeMounts:
        - name: worker-models
          mountPath: /app/models
        - name: worker-cache
          mountPath: /app/cache
        - name: worker-logs
          mountPath: /app/logs
      volumes:
      - name: worker-models
        persistentVolumeClaim:
          claimName: worker-models-pvc
      - name: worker-cache
        persistentVolumeClaim:
          claimName: worker-cache-pvc
      - name: worker-logs
        persistentVolumeClaim:
          claimName: worker-logs-pvc
      restartPolicy: Always
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: svg-ai-prod
  labels:
    app: svg-ai
    component: database
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: svg-ai
      component: database
  template:
    metadata:
      labels:
        app: svg-ai
        component: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: svgai_prod
        - name: POSTGRES_USER
          value: svgai
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: svg-ai-secrets
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
          name: postgres
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - svgai
            - -d
            - svgai_prod
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - svgai
            - -d
            - svgai_prod
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: svg-ai-prod
  labels:
    app: svg-ai
    component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: svg-ai
      component: cache
  template:
    metadata:
      labels:
        app: svg-ai
        component: cache
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command: ["redis-server"]
        args: ["--requirepass", "$(REDIS_PASSWORD)", "--appendonly", "yes"]
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: svg-ai-secrets
              key: REDIS_PASSWORD
        ports:
        - containerPort: 6379
          name: redis
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "250m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: redis-storage
          mountPath: /data
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-storage-pvc