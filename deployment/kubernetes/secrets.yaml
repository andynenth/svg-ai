apiVersion: v1
kind: Secret
metadata:
  name: svg-ai-secrets
  namespace: svg-ai-prod
  labels:
    app: svg-ai
    component: secrets
type: Opaque
data:
  # Database credentials (base64 encoded)
  # To generate: echo -n "your_password" | base64
  DB_PASSWORD: c3ZnYWlfcHJvZF9wYXNzd29yZF8yMDI1  # svgai_prod_password_2025
  POSTGRES_PASSWORD: c3ZnYWlfcHJvZF9wYXNzd29yZF8yMDI1

  # Redis credentials
  REDIS_PASSWORD: cmVkaXNfcHJvZF9wYXNzd29yZF8yMDI1  # redis_prod_password_2025

  # API keys and tokens
  JWT_SECRET_KEY: and0X3NlY3JldF9rZXlfcHJvZF8yMDI1X3N2Z2Fp  # jwt_secret_key_prod_2025_svgai
  API_SECRET_KEY: YXBpX3NlY3JldF9rZXlfcHJvZF8yMDI1X3N2Z2Fp  # api_secret_key_prod_2025_svgai

  # Monitoring credentials
  GRAFANA_ADMIN_PASSWORD: Z3JhZmFuYV9hZG1pbl8yMDI1  # grafana_admin_2025
  PROMETHEUS_PASSWORD: cHJvbWV0aGV1c19hZG1pbl8yMDI1  # prometheus_admin_2025
---
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret
  namespace: svg-ai-prod
  labels:
    app: svg-ai
    component: tls
type: kubernetes.io/tls
data:
  # TLS certificate and key (base64 encoded)
  # Generate with: kubectl create secret tls tls-secret --cert=path/to/tls.crt --key=path/to/tls.key --dry-run=client -o yaml
  tls.crt: |
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t
    # Add your actual TLS certificate here
    LS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: |
    LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t
    # Add your actual TLS private key here
    LS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQ==