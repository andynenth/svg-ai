version: '3.8'

# Production Docker Compose for 4-Tier SVG-AI System
# Complete production deployment with monitoring and scalability

services:
  # ============================================================================
  # Database Layer
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: svg-ai-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: svgai_prod
      POSTGRES_USER: svgai
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    secrets:
      - db_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U svgai -d svgai_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    networks:
      - svg-ai-network

  # ============================================================================
  # Cache Layer
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: svg-ai-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 15s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    networks:
      - svg-ai-network

  # ============================================================================
  # 4-Tier API Service
  # ============================================================================
  api-4tier:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.4tier-api
      target: production
    container_name: svg-ai-api-4tier-prod
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      ENVIRONMENT: production
      DATABASE_URL: postgresql://svgai:${DB_PASSWORD}@postgres:5432/svgai_prod
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      LOG_LEVEL: INFO
      API_WORKERS: 4
      API_HOST: 0.0.0.0
      API_PORT: 8000
      PRODUCTION_API_KEY: ${PRODUCTION_API_KEY}
      ADMIN_API_KEY: ${ADMIN_API_KEY}
      MONITORING_API_KEY: ${MONITORING_API_KEY}
      MAX_REQUEST_SIZE: 104857600  # 100MB
      REQUEST_TIMEOUT: 300
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - api_cache:/app/cache
      - api_logs:/app/logs
      - api_models:/app/models
      - api_config:/app/config
      - shared_temp:/tmp/claude
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v2/optimization/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - svg-ai-network

  # ============================================================================
  # 4-Tier Worker Service
  # ============================================================================
  worker-4tier:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.4tier-worker
      target: production
    container_name: svg-ai-worker-4tier-prod
    restart: unless-stopped
    environment:
      ENVIRONMENT: production
      DATABASE_URL: postgresql://svgai:${DB_PASSWORD}@postgres:5432/svgai_prod
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      LOG_LEVEL: INFO
      WORKER_CONCURRENCY: 2
      WORKER_PREFETCH: 4
      WORKER_TYPE: optimization
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - worker_cache:/app/cache
      - worker_logs:/app/logs
      - worker_models:/app/models
      - worker_config:/app/config
      - shared_temp:/tmp/claude
    healthcheck:
      test: ["CMD", "python", "-c", "import backend.ai_modules.optimization as opt; print('Worker healthy')"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 120s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 4G
          cpus: '4.0'
        reservations:
          memory: 2G
          cpus: '2.0'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 180s
    networks:
      - svg-ai-network

  # ============================================================================
  # Monitoring Service
  # ============================================================================
  flower:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.4tier-worker
      target: production
    container_name: svg-ai-flower-prod
    restart: unless-stopped
    ports:
      - "5555:5555"
    environment:
      ENVIRONMENT: production
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      FLOWER_USER: ${FLOWER_USER:-admin}
      FLOWER_PASSWORD: ${FLOWER_PASSWORD}
    depends_on:
      redis:
        condition: service_healthy
    command: ["monitoring"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    networks:
      - svg-ai-network

  # ============================================================================
  # Nginx Reverse Proxy
  # ============================================================================
  nginx:
    image: nginx:alpine
    container_name: svg-ai-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-4tier.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api-4tier
      - flower
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    networks:
      - svg-ai-network

  # ============================================================================
  # Monitoring Stack
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: svg-ai-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    networks:
      - svg-ai-network

  grafana:
    image: grafana/grafana:latest
    container_name: svg-ai-grafana-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana-datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/login || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
    networks:
      - svg-ai-network

# ============================================================================
# Volumes
# ============================================================================
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  api_cache:
    driver: local
  api_logs:
    driver: local
  api_models:
    driver: local
  api_config:
    driver: local
  worker_cache:
    driver: local
  worker_logs:
    driver: local
  worker_models:
    driver: local
  worker_config:
    driver: local
  shared_temp:
    driver: tmpfs
    driver_opts:
      tmpfs:
        size: 1G
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ============================================================================
# Secrets
# ============================================================================
secrets:
  db_password:
    file: ./secrets/db_password.txt

# ============================================================================
# Networks
# ============================================================================
networks:
  svg-ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# Additional Configuration
# ============================================================================
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

# Apply logging to all services
x-service-defaults: &service-defaults
  logging: *default-logging