# Output values for SVG-AI infrastructure

# VPC outputs
output "vpc_id" {
  description = "ID of the VPC"
  value       = module.vpc.vpc_id
}

output "vpc_cidr_block" {
  description = "CIDR block of the VPC"
  value       = module.vpc.vpc_cidr_block
}

output "private_subnets" {
  description = "List of IDs of private subnets"
  value       = module.vpc.private_subnets
}

output "public_subnets" {
  description = "List of IDs of public subnets"
  value       = module.vpc.public_subnets
}

# EKS outputs
output "cluster_id" {
  description = "EKS cluster ID"
  value       = module.eks.cluster_id
}

output "cluster_arn" {
  description = "EKS cluster ARN"
  value       = module.eks.cluster_arn
}

output "cluster_endpoint" {
  description = "Endpoint for EKS control plane"
  value       = module.eks.cluster_endpoint
}

output "cluster_security_group_id" {
  description = "Security group ids attached to the cluster control plane"
  value       = module.eks.cluster_security_group_id
}

output "cluster_certificate_authority_data" {
  description = "Base64 encoded certificate data required to communicate with the cluster"
  value       = module.eks.cluster_certificate_authority_data
}

output "cluster_oidc_issuer_url" {
  description = "The URL on the EKS cluster for the OpenID Connect identity provider"
  value       = module.eks.cluster_oidc_issuer_url
}

output "node_security_group_id" {
  description = "ID of the EKS node shared security group"
  value       = module.eks.node_security_group_id
}

# Database outputs
output "database_endpoint" {
  description = "RDS instance endpoint"
  value       = aws_db_instance.database.endpoint
  sensitive   = true
}

output "database_port" {
  description = "RDS instance port"
  value       = aws_db_instance.database.port
}

output "database_name" {
  description = "RDS instance database name"
  value       = aws_db_instance.database.db_name
}

output "database_username" {
  description = "RDS instance root username"
  value       = aws_db_instance.database.username
  sensitive   = true
}

output "database_secret_arn" {
  description = "ARN of the database secret in AWS Secrets Manager"
  value       = aws_secretsmanager_secret.database.arn
}

# Redis outputs
output "redis_endpoint" {
  description = "Redis replication group endpoint"
  value       = aws_elasticache_replication_group.redis.configuration_endpoint_address
  sensitive   = true
}

output "redis_port" {
  description = "Redis port"
  value       = aws_elasticache_replication_group.redis.port
}

output "redis_secret_arn" {
  description = "ARN of the Redis secret in AWS Secrets Manager"
  value       = aws_secretsmanager_secret.redis.arn
}

# IAM outputs
output "load_balancer_controller_role_arn" {
  description = "ARN of the AWS Load Balancer Controller IAM role"
  value       = module.load_balancer_controller_irsa_role.iam_role_arn
}

output "cluster_autoscaler_role_arn" {
  description = "ARN of the Cluster Autoscaler IAM role"
  value       = module.cluster_autoscaler_irsa_role.iam_role_arn
}

# Security outputs
output "additional_security_group_id" {
  description = "ID of the additional security group"
  value       = aws_security_group.additional.id
}

# Monitoring outputs
output "sns_topic_arn" {
  description = "ARN of the SNS topic for alerts"
  value       = aws_sns_topic.alerts.arn
}

# Connection information for kubectl
output "kubectl_config" {
  description = "kubectl config as generated by the module"
  value = templatefile("${path.module}/templates/kubeconfig.tpl", {
    cluster_name     = module.eks.cluster_id
    cluster_endpoint = module.eks.cluster_endpoint
    cluster_ca       = module.eks.cluster_certificate_authority_data
    aws_region       = var.aws_region
  })
  sensitive = true
}

# Environment-specific configuration
output "environment_config" {
  description = "Environment configuration for application deployment"
  value = {
    environment = var.environment
    region      = var.aws_region
    cluster     = module.eks.cluster_id
    vpc_id      = module.vpc.vpc_id

    database = {
      endpoint    = aws_db_instance.database.endpoint
      port        = aws_db_instance.database.port
      name        = aws_db_instance.database.db_name
      secret_arn  = aws_secretsmanager_secret.database.arn
    }

    redis = {
      endpoint   = aws_elasticache_replication_group.redis.configuration_endpoint_address
      port       = aws_elasticache_replication_group.redis.port
      secret_arn = aws_secretsmanager_secret.redis.arn
    }

    monitoring = {
      sns_topic = aws_sns_topic.alerts.arn
      log_group = "/aws/eks/${module.eks.cluster_id}"
    }
  }
  sensitive = true
}