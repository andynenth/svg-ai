{
  "architectures": {
    "simple": {
      "complexity": {
        "classifier_type": "simple",
        "total_parameters": 5124,
        "trainable_parameters": 5124,
        "num_layers": 1,
        "model_size_mb": 0.0195465087890625,
        "architecture": "Sequential(\n  (0): Dropout(p=0.2, inplace=False)\n  (1): Linear(in_features=1280, out_features=4, bias=True)\n)"
      },
      "performance": {
        "classifier_type": "simple",
        "batch_performance": {
          "1": {
            "avg_time_seconds": 0.047417712211608884,
            "time_per_sample": 0.047417712211608884,
            "samples_per_second": 21.08916591204032
          },
          "4": {
            "avg_time_seconds": 0.16179900169372557,
            "time_per_sample": 0.040449750423431394,
            "samples_per_second": 24.72203139776923
          },
          "8": {
            "avg_time_seconds": 0.32772250175476075,
            "time_per_sample": 0.040965312719345094,
            "samples_per_second": 24.410896283180794
          },
          "16": {
            "avg_time_seconds": 0.6432790040969849,
            "time_per_sample": 0.04020493775606156,
            "samples_per_second": 24.872566799316424
          }
        },
        "memory_usage_mb": 15.467781066894531
      }
    },
    "enhanced": {
      "complexity": {
        "classifier_type": "enhanced",
        "total_parameters": 328964,
        "trainable_parameters": 328964,
        "num_layers": 2,
        "model_size_mb": 1.2548980712890625,
        "architecture": "Sequential(\n  (0): Dropout(p=0.3, inplace=False)\n  (1): Linear(in_features=1280, out_features=256, bias=True)\n  (2): ReLU()\n  (3): Dropout(p=0.2, inplace=False)\n  (4): Linear(in_features=256, out_features=4, bias=True)\n)"
      },
      "performance": {
        "classifier_type": "enhanced",
        "batch_performance": {
          "1": {
            "avg_time_seconds": 0.050351715087890624,
            "time_per_sample": 0.050351715087890624,
            "samples_per_second": 19.86029668015213
          },
          "4": {
            "avg_time_seconds": 0.1643303871154785,
            "time_per_sample": 0.04108259677886963,
            "samples_per_second": 24.341207187622054
          },
          "8": {
            "avg_time_seconds": 0.30491659641265867,
            "time_per_sample": 0.038114574551582334,
            "samples_per_second": 26.23668273265521
          },
          "16": {
            "avg_time_seconds": 0.6093522787094117,
            "time_per_sample": 0.03808451741933823,
            "samples_per_second": 26.25738929521603
          }
        },
        "memory_usage_mb": 16.70313262939453
      }
    },
    "batch_norm": {
      "complexity": {
        "classifier_type": "batch_norm",
        "total_parameters": 164740,
        "trainable_parameters": 164740,
        "num_layers": 2,
        "model_size_mb": 0.6294174194335938,
        "architecture": "Sequential(\n  (0): Dropout(p=0.2, inplace=False)\n  (1): Linear(in_features=1280, out_features=128, bias=True)\n  (2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  (3): ReLU()\n  (4): Dropout(p=0.1, inplace=False)\n  (5): Linear(in_features=128, out_features=4, bias=True)\n)"
      },
      "performance": {
        "classifier_type": "batch_norm",
        "batch_performance": {
          "1": {
            "avg_time_seconds": 0.04274859428405762,
            "time_per_sample": 0.04274859428405762,
            "samples_per_second": 23.39258206609459
          },
          "4": {
            "avg_time_seconds": 0.16156699657440185,
            "time_per_sample": 0.04039174914360046,
            "samples_per_second": 24.757531456357757
          },
          "8": {
            "avg_time_seconds": 0.30527961254119873,
            "time_per_sample": 0.03815995156764984,
            "samples_per_second": 26.20548399353189
          },
          "16": {
            "avg_time_seconds": 0.6176723957061767,
            "time_per_sample": 0.038604524731636045,
            "samples_per_second": 25.903699293065234
          }
        },
        "memory_usage_mb": 16.077651977539062
      }
    },
    "deep": {
      "complexity": {
        "classifier_type": "deep",
        "total_parameters": 820612,
        "trainable_parameters": 820612,
        "num_layers": 4,
        "model_size_mb": 3.1303863525390625,
        "architecture": "Sequential(\n  (0): Dropout(p=0.3, inplace=False)\n  (1): Linear(in_features=1280, out_features=512, bias=True)\n  (2): ReLU()\n  (3): Dropout(p=0.2, inplace=False)\n  (4): Linear(in_features=512, out_features=256, bias=True)\n  (5): ReLU()\n  (6): Dropout(p=0.1, inplace=False)\n  (7): Linear(in_features=256, out_features=128, bias=True)\n  (8): ReLU()\n  (9): Dropout(p=0.1, inplace=False)\n  (10): Linear(in_features=128, out_features=4, bias=True)\n)"
      },
      "performance": {
        "classifier_type": "deep",
        "batch_performance": {
          "1": {
            "avg_time_seconds": 0.04181902408599854,
            "time_per_sample": 0.04181902408599854,
            "samples_per_second": 23.912561850882856
          },
          "4": {
            "avg_time_seconds": 0.1667103052139282,
            "time_per_sample": 0.04167757630348205,
            "samples_per_second": 23.993717694098557
          },
          "8": {
            "avg_time_seconds": 0.347976016998291,
            "time_per_sample": 0.043497002124786376,
            "samples_per_second": 22.99009014761868
          },
          "16": {
            "avg_time_seconds": 0.6203885078430176,
            "time_per_sample": 0.0387742817401886,
            "samples_per_second": 25.790290757688602
          }
        },
        "memory_usage_mb": 18.57862091064453
      }
    },
    "residual": {
      "complexity": {
        "classifier_type": "residual",
        "total_parameters": 662020,
        "trainable_parameters": 662020,
        "num_layers": 3,
        "model_size_mb": 2.5254058837890625,
        "architecture": "Sequential(\n  (0): Dropout(p=0.2, inplace=False)\n  (1): ResidualBlock(\n    (linear1): Linear(in_features=1280, out_features=256, bias=True)\n    (linear2): Linear(in_features=256, out_features=1280, bias=True)\n    (dropout): Dropout(p=0.2, inplace=False)\n    (relu): ReLU()\n  )\n  (2): Dropout(p=0.1, inplace=False)\n  (3): Linear(in_features=1280, out_features=4, bias=True)\n)"
      },
      "performance": {
        "classifier_type": "residual",
        "batch_performance": {
          "1": {
            "avg_time_seconds": 0.05255100727081299,
            "time_per_sample": 0.05255100727081299,
            "samples_per_second": 19.029130970728385
          },
          "4": {
            "avg_time_seconds": 0.16691899299621582,
            "time_per_sample": 0.041729748249053955,
            "samples_per_second": 23.963719935038686
          },
          "8": {
            "avg_time_seconds": 0.32745521068572997,
            "time_per_sample": 0.040931901335716246,
            "samples_per_second": 24.43082210616546
          },
          "16": {
            "avg_time_seconds": 0.7237039804458618,
            "time_per_sample": 0.045231498777866364,
            "samples_per_second": 22.108486939843374
          }
        },
        "memory_usage_mb": 17.97364044189453
      }
    }
  },
  "recommendations": [
    "For fastest inference: Use 'deep' classifier",
    "For lowest memory usage: Use 'simple' classifier",
    "For best overall balance: Use 'deep' classifier",
    "For small dataset (35 samples): Prefer simpler architectures to reduce overfitting",
    "For logo classification: Enhanced classifier provides good regularization",
    "For production deployment: Consider simple classifier for fastest inference"
  ],
  "metadata": {
    "version": "5.3.1",
    "description": "Classifier head architecture comparison for EfficientNet-B0",
    "dataset_size": 35,
    "target_classes": 4,
    "evaluation_criteria": [
      "Parameter count",
      "Inference speed",
      "Memory usage",
      "Architecture complexity"
    ]
  }
}