# Enterprise Monitoring and Observability Stack
# Comprehensive monitoring, alerting, and observability for production 4-tier system

apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
  labels:
    name: monitoring
    tier: observability
    security-tier: monitoring

---
# ============================================================================
# Enhanced Prometheus Configuration with High Availability
# ============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-enterprise-config
  namespace: monitoring
  labels:
    app: prometheus
    component: config
data:
  prometheus.yml: |
    global:
      scrape_interval: 10s
      evaluation_interval: 10s
      external_labels:
        cluster: 'svg-ai-enterprise-prod'
        environment: 'production'
        region: 'us-east-1'
        monitor: 'prometheus-primary'
    
    # High availability and clustering
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager-0.alertmanager:9093
              - alertmanager-1.alertmanager:9093
              - alertmanager-2.alertmanager:9093
          timeout: 10s
          api_version: v2
    
    rule_files:
      - "/etc/prometheus/rules/*.yml"
    
    scrape_configs:
      # Prometheus itself with high frequency
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
        scrape_interval: 5s
        metrics_path: /metrics
        honor_labels: true
      
      # Kubernetes API server monitoring
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https
        scrape_interval: 5s
      
      # Enhanced SVG-AI API monitoring
      - job_name: 'svg-ai-enterprise-api'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names: ['svg-ai-enterprise-prod']
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: svg-ai-enterprise-api-service
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: pod
          - source_labels: [__meta_kubernetes_pod_node_name]
            target_label: node
        scrape_interval: 5s
        metrics_path: /metrics
        honor_labels: true
      
      # SVG-AI Workers with detailed metrics
      - job_name: 'svg-ai-enterprise-workers'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names: ['svg-ai-enterprise-prod']
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_component]
            action: keep
            regex: worker
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: pod
          - source_labels: [__meta_kubernetes_pod_node_name]
            target_label: node
        scrape_interval: 10s
      
      # PostgreSQL with detailed database metrics
      - job_name: 'postgres-enterprise'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names: ['svg-ai-enterprise-prod']
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_component]
            action: keep
            regex: database
          - source_labels: [__meta_kubernetes_pod_container_port_name]
            action: keep
            regex: metrics
        scrape_interval: 15s
      
      # Redis Cluster monitoring
      - job_name: 'redis-enterprise'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names: ['svg-ai-enterprise-prod']
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_component]
            action: keep
            regex: cache
          - source_labels: [__meta_kubernetes_pod_container_port_name]
            action: keep
            regex: metrics
        scrape_interval: 15s
      
      # Kubernetes cluster components
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics
        scrape_interval: 30s
      
      # cAdvisor for container metrics
      - job_name: 'kubernetes-cadvisor'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
        scrape_interval: 30s
      
      # Jaeger tracing metrics
      - job_name: 'jaeger'
        static_configs:
          - targets: ['jaeger-query:16686']
        scrape_interval: 30s
        metrics_path: /metrics
      
      # NGINX Ingress Controller
      - job_name: 'nginx-ingress'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names: ['ingress-nginx']
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
            action: keep
            regex: ingress-nginx
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
        scrape_interval: 30s
      
      # Blackbox exporter for external monitoring
      - job_name: 'blackbox-http'
        metrics_path: /probe
        params:
          module: [http_2xx]
        static_configs:
          - targets:
            - https://api.svg-ai.company.com/health
            - https://svg-ai.company.com/health
        relabel_configs:
          - source_labels: [__address__]
            target_label: __param_target
          - source_labels: [__param_target]
            target_label: instance
          - target_label: __address__
            replacement: blackbox-exporter:9115
        scrape_interval: 30s
    
    # Remote write for long-term storage
    remote_write:
      - url: "https://prometheus-remote-write.svg-ai.company.com/api/v1/write"
        queue_config:
          max_samples_per_send: 10000
          max_shards: 200
          capacity: 100000
          batch_send_deadline: 5s
        write_relabel_configs:
          - source_labels: [__name__]
            regex: 'svg_ai_.*|prometheus_.*|up|kubernetes_.*'
            action: keep
    
    # Storage configuration
    storage:
      tsdb:
        retention.time: 15d
        retention.size: 100GB
        path: /prometheus/data
        min-block-duration: 2h
        max-block-duration: 24h
        wal-compression: true

---
# ============================================================================
# Prometheus StatefulSet with High Availability
# ============================================================================
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
    component: server
spec:
  serviceName: prometheus
  replicas: 2
  selector:
    matchLabels:
      app: prometheus
      component: server
  template:
    metadata:
      labels:
        app: prometheus
        component: server
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      serviceAccountName: prometheus
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values: ["prometheus"]
            topologyKey: kubernetes.io/hostname
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/data'
          - '--storage.tsdb.retention.time=15d'
          - '--storage.tsdb.retention.size=100GB'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--web.enable-lifecycle'
          - '--web.enable-admin-api'
          - '--web.route-prefix=/'
          - '--web.external-url=https://prometheus.svg-ai.company.com'
          - '--storage.tsdb.wal-compression'
          - '--query.max-concurrency=20'
          - '--query.timeout=2m'
        ports:
        - containerPort: 9090
          name: web
        resources:
          requests:
            memory: "4Gi"
            cpu: "2000m"
          limits:
            memory: "8Gi"
            cpu: "4000m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
          readOnly: true
        - name: rules
          mountPath: /etc/prometheus/rules
          readOnly: true
        - name: data
          mountPath: /prometheus/data
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: config
        configMap:
          name: prometheus-enterprise-config
      - name: rules
        configMap:
          name: prometheus-enterprise-rules
      - name: tmp
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd-ha
      resources:
        requests:
          storage: 200Gi

---
# ============================================================================
# AlertManager with High Availability Clustering
# ============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: monitoring
  labels:
    app: alertmanager
data:
  alertmanager.yml: |
    global:
      smtp_smarthost: 'smtp.company.com:587'
      smtp_from: 'alerts@svg-ai.company.com'
      smtp_auth_username: 'alerts@svg-ai.company.com'
      smtp_auth_password: 'smtp-password'
      resolve_timeout: 5m
    
    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 12h
      receiver: 'web.hook'
      routes:
      - match:
          severity: critical
        receiver: 'critical-alerts'
        group_wait: 5s
        repeat_interval: 5m
      - match:
          severity: warning
        receiver: 'warning-alerts'
        group_wait: 10s
        repeat_interval: 30m
      - match:
          service: database
        receiver: 'database-alerts'
      - match:
          service: api
        receiver: 'api-alerts'
    
    inhibit_rules:
    - source_match:
        severity: 'critical'
      target_match:
        severity: 'warning'
      equal: ['alertname', 'dev', 'instance']
    
    receivers:
    - name: 'web.hook'
      webhook_configs:
      - url: '${SLACK_WEBHOOK_URL}'
        send_resolved: true
        title: 'SVG-AI Alert: {{ .GroupLabels.alertname }}'
        text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'
    
    - name: 'critical-alerts'
      email_configs:
      - to: 'oncall@company.com'
        subject: '[CRITICAL] SVG-AI Alert: {{ .GroupLabels.alertname }}'
        body: |
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Severity: {{ .Labels.severity }}
          Instance: {{ .Labels.instance }}
          {{ end }}
      slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#critical-alerts'
        color: 'danger'
        title: '[CRITICAL] SVG-AI Alert'
        text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'
      pagerduty_configs:
      - service_key: 'your-pagerduty-service-key'
        description: 'SVG-AI Critical Alert: {{ .GroupLabels.alertname }}'
    
    - name: 'warning-alerts'
      email_configs:
      - to: 'team@company.com'
        subject: '[WARNING] SVG-AI Alert: {{ .GroupLabels.alertname }}'
      slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#alerts'
        color: 'warning'
        title: '[WARNING] SVG-AI Alert'
    
    - name: 'database-alerts'
      email_configs:
      - to: 'dba@company.com'
        subject: '[DATABASE] SVG-AI Alert: {{ .GroupLabels.alertname }}'
      slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#database-alerts'
    
    - name: 'api-alerts'
      email_configs:
      - to: 'api-team@company.com'
        subject: '[API] SVG-AI Alert: {{ .GroupLabels.alertname }}'
      slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#api-alerts'

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: alertmanager
  namespace: monitoring
  labels:
    app: alertmanager
spec:
  serviceName: alertmanager
  replicas: 3
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
    spec:
      serviceAccountName: alertmanager
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values: ["alertmanager"]
            topologyKey: kubernetes.io/hostname
      containers:
      - name: alertmanager
        image: prom/alertmanager:v0.25.0
        args:
          - '--config.file=/etc/alertmanager/alertmanager.yml'
          - '--storage.path=/alertmanager/data'
          - '--data.retention=120h'
          - '--web.listen-address=0.0.0.0:9093'
          - '--web.route-prefix=/'
          - '--cluster.listen-address=0.0.0.0:9094'
          - '--cluster.peer=alertmanager-0.alertmanager:9094'
          - '--cluster.peer=alertmanager-1.alertmanager:9094'
          - '--cluster.peer=alertmanager-2.alertmanager:9094'
          - '--cluster.reconnect-timeout=10m'
          - '--web.external-url=https://alertmanager.svg-ai.company.com'
        ports:
        - containerPort: 9093
          name: web
        - containerPort: 9094
          name: cluster
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9093
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9093
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: config
          mountPath: /etc/alertmanager
          readOnly: true
        - name: data
          mountPath: /alertmanager/data
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: config
        configMap:
          name: alertmanager-config
      - name: tmp
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: standard-ha
      resources:
        requests:
          storage: 10Gi

---
# ============================================================================
# Jaeger Distributed Tracing
# ============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger-collector
  namespace: monitoring
  labels:
    app: jaeger
    component: collector
spec:
  replicas: 2
  selector:
    matchLabels:
      app: jaeger
      component: collector
  template:
    metadata:
      labels:
        app: jaeger
        component: collector
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "14269"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
      containers:
      - name: jaeger-collector
        image: jaegertracing/jaeger-collector:1.47
        args:
          - "--config-file=/conf/collector.yaml"
          - "--es.server-urls=http://elasticsearch:9200"
          - "--es.num-shards=3"
          - "--es.num-replicas=1"
        ports:
        - containerPort: 14267
          name: tchannel
        - containerPort: 14268
          name: http
        - containerPort: 14269
          name: admin
        - containerPort: 9411
          name: zipkin
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /
            port: 14269
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 14269
          initialDelaySeconds: 5
          periodSeconds: 10
        volumeMounts:
        - name: config
          mountPath: /conf
          readOnly: true
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: config
        configMap:
          name: jaeger-config
      - name: tmp
        emptyDir: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger-query
  namespace: monitoring
  labels:
    app: jaeger
    component: query
spec:
  replicas: 2
  selector:
    matchLabels:
      app: jaeger
      component: query
  template:
    metadata:
      labels:
        app: jaeger
        component: query
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
      containers:
      - name: jaeger-query
        image: jaegertracing/jaeger-query:1.47
        args:
          - "--config-file=/conf/query.yaml"
          - "--es.server-urls=http://elasticsearch:9200"
        ports:
        - containerPort: 16686
          name: query
        - containerPort: 16687
          name: admin
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /
            port: 16687
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 16687
          initialDelaySeconds: 5
          periodSeconds: 10
        volumeMounts:
        - name: config
          mountPath: /conf
          readOnly: true
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: config
        configMap:
          name: jaeger-config
      - name: tmp
        emptyDir: {}

---
# ============================================================================
# Grafana with Enterprise Features
# ============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: monitoring
  labels:
    app: grafana
data:
  grafana.ini: |
    [server]
    protocol = http
    http_port = 3000
    domain = grafana.svg-ai.company.com
    root_url = https://grafana.svg-ai.company.com
    
    [security]
    admin_user = admin
    admin_password = $__file{/etc/secrets/admin_password}
    secret_key = $__file{/etc/secrets/secret_key}
    disable_gravatar = true
    cookie_secure = true
    cookie_samesite = strict
    
    [users]
    allow_sign_up = false
    allow_org_create = false
    auto_assign_org = true
    auto_assign_org_role = Viewer
    
    [auth]
    disable_login_form = false
    disable_signout_menu = false
    
    [auth.ldap]
    enabled = true
    config_file = /etc/grafana/ldap.toml
    allow_sign_up = true
    
    [smtp]
    enabled = true
    host = smtp.company.com:587
    user = grafana@svg-ai.company.com
    password = $__file{/etc/secrets/smtp_password}
    from_address = grafana@svg-ai.company.com
    from_name = SVG-AI Grafana
    
    [alerting]
    enabled = true
    execute_alerts = true
    
    [unified_alerting]
    enabled = true
    disabled_orgs = 
    min_interval = 10s
    
    [metrics]
    enabled = true
    interval_seconds = 10
    
    [tracing.jaeger]
    address = jaeger-query:14268
    always_included_tag = 
    sampler_type = const
    sampler_param = 1
    
    [feature_toggles]
    enable = ngalert,live,dashboardPreviews
    
    [log]
    mode = console
    level = info
    
    [log.console]
    level = info
    format = json

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  replicas: 2
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: grafana
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        runAsGroup: 472
        fsGroup: 472
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values: ["grafana"]
              topologyKey: kubernetes.io/hostname
      containers:
      - name: grafana
        image: grafana/grafana:10.0.0
        ports:
        - containerPort: 3000
          name: grafana
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD__FILE
          value: /etc/secrets/admin_password
        - name: GF_INSTALL_PLUGINS
          value: "grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel"
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
        volumeMounts:
        - name: config
          mountPath: /etc/grafana
          readOnly: true
        - name: secrets
          mountPath: /etc/secrets
          readOnly: true
        - name: dashboards
          mountPath: /var/lib/grafana/dashboards
          readOnly: true
        - name: datasources
          mountPath: /etc/grafana/provisioning/datasources
          readOnly: true
        - name: dashboard-providers
          mountPath: /etc/grafana/provisioning/dashboards
          readOnly: true
        - name: storage
          mountPath: /var/lib/grafana
      volumes:
      - name: config
        configMap:
          name: grafana-config
      - name: secrets
        secret:
          secretName: grafana-secrets
      - name: dashboards
        configMap:
          name: grafana-dashboards
      - name: datasources
        configMap:
          name: grafana-datasources
      - name: dashboard-providers
        configMap:
          name: grafana-dashboard-providers
      - name: storage
        persistentVolumeClaim:
          claimName: grafana-storage

---
# ============================================================================
# Service Accounts and RBAC
# ============================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: alertmanager
  namespace: monitoring
  labels:
    app: alertmanager

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  labels:
    app: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
  labels:
    app: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: monitoring

---
# ============================================================================
# Services
# ============================================================================
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
    name: web
  selector:
    app: prometheus
    component: server

---
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
  namespace: monitoring
  labels:
    app: alertmanager
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 9093
    targetPort: 9093
    name: web
  - port: 9094
    targetPort: 9094
    name: cluster
  selector:
    app: alertmanager

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    name: grafana
  selector:
    app: grafana

---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-collector
  namespace: monitoring
  labels:
    app: jaeger
    component: collector
spec:
  type: ClusterIP
  ports:
  - port: 14267
    targetPort: 14267
    name: tchannel
  - port: 14268
    targetPort: 14268
    name: http
  - port: 9411
    targetPort: 9411
    name: zipkin
  selector:
    app: jaeger
    component: collector

---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-query
  namespace: monitoring
  labels:
    app: jaeger
    component: query
spec:
  type: ClusterIP
  ports:
  - port: 16686
    targetPort: 16686
    name: query
  selector:
    app: jaeger
    component: query

---
# ============================================================================
# Persistent Volume Claims
# ============================================================================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: monitoring
  labels:
    app: grafana
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard-ha
  resources:
    requests:
      storage: 20Gi
